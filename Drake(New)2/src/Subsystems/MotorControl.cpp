// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "MotorControl.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

MotorControl::MotorControl() : Subsystem("MotorControl") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	hindRight = RobotMap::motorControlHindRight;
	hindLeft = RobotMap::motorControlHindLeft;
	frontRight = RobotMap::motorControlFrontRight;
	frontLeft = RobotMap::motorControlFrontLeft;
	robotDrive = RobotMap::motorControlRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void MotorControl::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void MotorControl::InitMecanum(uint32_t  frontLeftMotor, uint32_t  rearLeftMotor,
							uint32_t  frontRightMotor,uint32_t  rearRightMotor) {
	RobotDrive (frontLeftMotor, rearLeftMotor, frontRightMotor, rearRightMotor);



}

/*
void MotorControl::Forward(float value) {
frontRight->Set(-value);
frontLeft->Set(value);
hindRight->Set(-value);
hindLeft->Set(value);
}
void MotorControl::Backward(float value) {
frontRight->Set(-value);
frontLeft->Set(value);
hindRight->Set(-value);
hindLeft->Set(value);
}
void MotorControl::Left(float value) {
frontRight->Set(-value);
frontLeft->Set(-value);
hindRight->Set(value);
hindLeft->Set(value);
}
void MotorControl::Right(float value) {
frontRight->Set(value);
frontLeft->Set(value);
hindRight->Set(-value);
hindLeft->Set(-value);
}*/

// Put methods for controlling this subsystem
// here. Call these from Commands.

